# %% [markdown]
# # Downloading and preparing stock data

# %%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score

start_date = '2010-01-01'
end_date = '2020-01-01'
ticker = '^OMX'
df = yf.download(ticker,start_date,end_date)
df.index = df.index.date
df.index.name = "Date"

df.head()

# %%
# Stock price plot

df['Adj Close'].plot(figsize=(10,7))
plt.title("%s Stock Price" %ticker,fontsize=17)
plt.xlabel("Time",fontsize=14)
plt.ylabel("Price",fontsize=14)
plt.grid(which="major", color='k',linestyle='-.',linewidth=0.5)

# %%
# check for missing values

df.isna().any()

# %%
# Preparing X and y to train
#data = df.reset_index()
#X = np.array(data.index).reshape(-1,1)

df2 = df['Adj Close']
df2 = pd.DataFrame(df2)
df2

days_predicted = 500
df2['Prediction'] = df2['Adj Close'].shift(-days_predicted)

X = np.array(df2.drop(['Prediction'], 1))[:-days_predicted]

y = np.array(df2['Prediction'])[:-days_predicted]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, train_size=0.75)



# %% [markdown]
# # Decision tree regression

# %%
tree = DecisionTreeRegressor().fit(X_train, y_train)

X_future = df2.drop(['Prediction'], 1)[:-days_predicted]
X_future = X_future.tail(days_predicted)
X_future = np.array(X_future)
X_future[0:10]

# %%
predictions = tree.predict(X_future)
valid = df2[X.shape[0]:]
valid['Predictions'] = predictions

plt.figure(figsize=(10,7))
plt.title("Model")
plt.xlabel('Days')
plt.ylabel('Close Price USD ($)')
plt.plot(df2['Adj Close'])
plt.plot(valid[['Adj Close', 'Predictions']])
plt.grid(which="major", color='k',linestyle='-.',linewidth=0.5)
plt.legend(["Original", "Valid", 'Predicted'])
plt.show()


