# %% [markdown]
# # Downloading and preparing stock data

# %%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

start_date = '2010-01-01'
end_date = '2020-01-01'
ticker = 'INVE-B.ST'
df = yf.download(ticker,start_date,end_date)
df.index = df.index.date
df.index.name = "Date"

df.head()

# %%
# Stock price plot

df['Adj Close'].plot(figsize=(10, 7))
plt.title("INVE-B Stock Price", fontsize=17)
plt.xlabel("Time", fontsize=14)
plt.ylabel("Price", fontsize=14)
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)


# %%
# check for missing values

df.isna().any()

# %%
# creating trendline from index

data = df.reset_index()

X = np.array(data.index).reshape(-1, 1)
y = df['Adj Close']

# %% [markdown]
# # Linear Regression Model

# %% [markdown]
# $$ \Large y=\beta_0 + \beta_1x

# %%
X_train, X_test, y_train, y_test = train_test_split(
    X, y, random_state=1, train_size=0.75)

linreg_model = LinearRegression()
linreg_model.fit(X_train, y_train)

predicted_price = linreg_model.predict(X_test)
predicted_price = pd.DataFrame(
    predicted_price, index=y_test.index, columns=['Price'])
predicted_price.plot(figsize=(10, 7))
y_test.plot()
plt.title("INVE-B Stock Price", fontsize=17)
plt.xlabel("Time", fontsize=14)
plt.ylabel("Price", fontsize=14)
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
plt.legend(['Predicted Price', 'Actual Price'])

# %%
print("R^2 Score: %.2f" % linreg_model.score(X_test, y_test))
